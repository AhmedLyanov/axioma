#!/usr/bin/env node
import Axioma from './index.js';

async function main() {
  const args = process.argv.slice(2);
  const command = args[0];
  
  const client = new Axioma();

  if (command === 'generate' || command === 'gen') {
    const projectPath = args[1] || '.';
    const outputFile = args[2]; 
    
    console.log('–ó–∞–ø—É—Å–∫ Axioma Code Generator...');
    await client.generateCodeFromTZ(projectPath, outputFile);
  } else if (command === 'chat') {
    const prompt = args.slice(1).join(' ');
    if (!prompt) {
      console.log('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI');
      return;
    }
    
    const response = await client.query(prompt, {
      model: "gpt-5-nano",
      system: "You are a helpful AI assistant"
    });
    
    console.log('--->', response);
    
  } else if (command === 'code') {
    const prompt = args.slice(1).join(' ');
    if (!prompt) {
      console.log('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞');
      return;
    }
    
    const fullPrompt = `
–ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${prompt}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON: { "code": "...", "filename": "...", "type": "..." }
`;
    
    const response = await client.query(fullPrompt, {
      model: "qwen-coder",
      seed: 123,
      system: "You Senior Fullstack-Developer React, Vue, Angular, Fetch, API, REST API and more. Always respond with valid JSON only: {code, filename, type}. No explanations.",
      temperature: 0.3,
      json_response: true
    });
    
    if (response) {
      try {
        const parsed = typeof response === 'string' ? JSON.parse(response) : response;
        console.log('üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n', parsed.code || response);
        console.log(`\nüìÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏–º—è: ${parsed.filename || 'N/A'}`);
        console.log(`–¢–∏–ø: ${parsed.type || 'N/A'}`);
      } catch {
        console.log('üíª –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥:\n', response);
      }
    }
    
  } else {
    console.log(`
Axioma CLI - AI-powered code generation tool

–ö–æ–º–∞–Ω–¥—ã:
  generate [path] [output]  - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏–∑ –¢–ó.txt —Ñ–∞–π–ª–æ–≤ (–ò–ò –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∏–º—è —Ñ–∞–π–ª–∞)
  gen [path] [output]       - –ö–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è generate
  chat <prompt>             - –û–±—â–µ–Ω–∏–µ —Å AI
  code <prompt>             - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ –ø—Ä–æ–º–ø—Ç—É (—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏)
  help                      - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  axioma generate .          - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ (–ò–ò –≤—ã–±–µ—Ä–µ—Ç –∏–º—è)
  axioma gen ./project       - –¢–æ –∂–µ, –±–µ–∑ output ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ò–ò
  axioma chat "–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é" - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
  axioma code "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏" - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ + –∏–º—è —Ñ–∞–π–ª–∞

–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –¢–ó.txt –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞!
    `);
  }
}

main().catch(console.error);