// index.ts
import axios from "axios";
export default class Axioma {
    constructor() {
        this.baseUrl = "https://text.pollinations.ai";
    }
    async query(prompt, options = {}) {
        try {
            const encodedPrompt = encodeURIComponent(prompt);
            const url = `${this.baseUrl}/${encodedPrompt}`;
            const response = await axios.get(url, { params: options });
            return options.json_response ? response.data : response.data.toString();
        }
        catch (err) {
            console.error("Error making API request:", err.message);
            return null;
        }
    }
    parseGeneratedOutput(generatedContent) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (–ò–ò –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å { "code": "...", "filename": "...", "type": "..." })
            const jsonMatch = generatedContent.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const parsed = JSON.parse(jsonMatch[0]);
                if (parsed.code && parsed.filename && parsed.type) {
                    const extMap = {
                        react: 'jsx',
                        vue: 'vue',
                        angular: 'ts',
                        html: 'html',
                        css: 'css',
                        python: 'py',
                        nodejs: 'js',
                        typescript: 'ts',
                        javascript: 'js'
                    };
                    return {
                        code: parsed.code,
                        filename: parsed.filename,
                        type: parsed.type.toLowerCase(),
                        extension: extMap[parsed.type.toLowerCase()] || 'js'
                    };
                }
            }
            // Fallback: –µ—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
            const fallbackType = this.detectContentTypeFallback(generatedContent);
            const fallbackCode = this.formatCodeFallback(generatedContent, fallbackType.type);
            const fallbackFilename = this.suggestFilenameFromContent(fallbackCode, fallbackType.type);
            return {
                code: fallbackCode,
                filename: fallbackFilename,
                type: fallbackType.type,
                extension: fallbackType.extension
            };
        }
        catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞ –ò–ò:', err);
            return null;
        }
    }
    detectContentTypeFallback(content) {
        const contentLower = content.toLowerCase();
        if (contentLower.includes('react') &&
            (contentLower.includes('jsx') || contentLower.includes('tsx') ||
                contentLower.includes('</div>') || contentLower.includes('</button>'))) {
            return { type: 'react', extension: 'jsx' };
        }
        if (contentLower.includes('vue') &&
            (contentLower.includes('<template>') || contentLower.includes('vue.component'))) {
            return { type: 'vue', extension: 'vue' };
        }
        if (contentLower.includes('angular') && contentLower.includes('@component')) {
            return { type: 'angular', extension: 'ts' };
        }
        if ((contentLower.includes('html') && contentLower.includes('</')) ||
            contentLower.includes('<!doctype') || contentLower.includes('<html>')) {
            return { type: 'html', extension: 'html' };
        }
        if (contentLower.includes('css') &&
            (contentLower.includes('{') && contentLower.includes('}'))) {
            return { type: 'css', extension: 'css' };
        }
        if (contentLower.includes('python') &&
            (contentLower.includes('def ') || contentLower.includes('import ') || contentLower.includes('class '))) {
            return { type: 'python', extension: 'py' };
        }
        if (contentLower.includes('node.js') ||
            (contentLower.includes('express') && contentLower.includes('require(')) ||
            contentLower.includes('module.exports')) {
            return { type: 'nodejs', extension: 'js' };
        }
        if (contentLower.includes('typescript') ||
            (contentLower.includes('interface') && contentLower.includes(':')) ||
            contentLower.includes('const ')) {
            return { type: 'typescript', extension: 'ts' };
        }
        return { type: 'javascript', extension: 'js' };
    }
    formatCodeFallback(content, type) {
        let cleanedContent = content;
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–∑ Markdown
        const codeBlocks = content.match(/```(?:[\w]*)\n([\s\S]*?)```/g);
        if (codeBlocks && codeBlocks.length > 0) {
            cleanedContent = codeBlocks.map(block => {
                return block.replace(/```[\w]*\n/, '').replace(/```$/, '');
            }).join('\n\n');
        }
        else {
            // Fallback: –∏—â–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–¥–∞
            const codeStarts = [
                'import ', 'export ', 'function ', 'const ', 'let ', 'var ',
                'class ', 'interface ', '<!DOCTYPE', '<html', 'def ', 'from ',
                'React.', 'vue.', 'angular.'
            ];
            for (const start of codeStarts) {
                const index = content.indexOf(start);
                if (index !== -1) {
                    cleanedContent = content.substring(index);
                    break;
                }
            }
        }
        // –£–¥–∞–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        const explanationMarkers = [
            '\n–≠—Ç–æ—Ç –∫–æ–¥', '\n–î–∞–Ω–Ω—ã–π –∫–æ–¥', '\n–ö–æ–º–ø–æ–Ω–µ–Ω—Ç', '\n–§—É–Ω–∫—Ü–∏—è',
            '\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ', '\n–í–∞–∂–Ω–æ:', '\nNote:', '\nThis code'
        ];
        for (const marker of explanationMarkers) {
            const index = cleanedContent.indexOf(marker);
            if (index !== -1) {
                cleanedContent = cleanedContent.substring(0, index);
                break;
            }
        }
        return cleanedContent.trim();
    }
    suggestFilenameFromContent(code, type) {
        // –ü—Ä–æ—Å—Ç–æ–π fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, const MyComponent = ...)
        const componentMatch = code.match(/const\s+(\w+)/) || code.match(/class\s+(\w+)/) || code.match(/export\s+default\s+(\w+)/);
        if (componentMatch) {
            return `${componentMatch[1]}.${this.getExtension(type)}`;
        }
        // –ò–ª–∏ –ø–æ —Ç–∏–ø—É
        return `Generated.${this.getExtension(type)}`;
    }
    getExtension(type) {
        const extMap = {
            react: 'jsx',
            vue: 'vue',
            angular: 'ts',
            html: 'html',
            css: 'css',
            python: 'py',
            nodejs: 'js',
            typescript: 'ts',
            javascript: 'js'
        };
        return extMap[type.toLowerCase()] || 'js';
    }
    async generateCodeFromTZ(projectPath = ".", outputFile) {
        try {
            const fs = await import('fs');
            const path = await import('path');
            const tzFiles = [];
            function findTZFiles(dir) {
                const files = fs.readdirSync(dir);
                for (const file of files) {
                    const filePath = path.join(dir, file);
                    const stat = fs.statSync(filePath);
                    if (stat.isDirectory() && file !== 'node_modules' && file !== '.git') {
                        findTZFiles(filePath);
                    }
                    else if (file === '–¢–ó.txt' || file === 'tz.txt' || file === 'specification.txt') {
                        tzFiles.push(filePath);
                    }
                }
            }
            findTZFiles(projectPath);
            if (tzFiles.length === 0) {
                console.log('‚ùå –§–∞–π–ª—ã –¢–ó.txt –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ');
                return;
            }
            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¢–ó: ${tzFiles.length}`);
            let tzContent = '';
            for (const tzFile of tzFiles) {
                console.log(`üìñ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${tzFile}`);
                const content = fs.readFileSync(tzFile, 'utf-8');
                tzContent += `\n\n=== –§–∞–π–ª: ${tzFile} ===\n${content}`;
            }
            const prompt = `
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–æ–¥.

${tzContent}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–¥—É:
1. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–±–æ—á–∏–º –∏ –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
2. –î–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º.
3. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–µ—à–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –¢–ó –∑–∞–¥–∞—á–∏.

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:
{
  "code": "–ø–æ–ª–Ω—ã–π —á–∏—Å—Ç—ã–π –∫–æ–¥ –∑–¥–µ—Å—å (–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)",
  "filename": "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä MyComponent.jsx",
  "type": "—Ç–∏–ø —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä react, vue, python"
}

–ü—Ä–∏–º–µ—Ä JSON:
{
  "code": "import React from 'react'; ...",
  "filename": "MyButton.jsx",
  "type": "react"
}
`;
            console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é AI...');
            const generatedCode = await this.query(prompt, {
                model: "mistral",
                seed: 123,
                system: "You Senior Fullstack-Developer React, Vue, Angular, Fetch, API, REST API, Node.js, Python and more. Always respond with valid JSON only: {code, filename, type}. No explanations.",
                temperature: 0.3, // –ü–æ–Ω–∏–∂–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ JSON
                json_response: true
            });
            if (generatedCode) {
                const output = this.parseGeneratedOutput(generatedCode);
                if (output && output.code) {
                    const finalOutputFile = outputFile || output.filename;
                    const outputPath = path.join(projectPath, finalOutputFile);
                    fs.writeFileSync(outputPath, output.code);
                    console.log(`–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!`);
                    console.log(`–¢–∏–ø: ${output.type}`);
                    console.log(`–§–∞–π–ª: ${outputPath}`);
                    console.log(`–†–∞–∑–º–µ—Ä: ${output.code.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                    console.log('\n–ü—Ä–µ–≤—å—é –∫–æ–¥–∞:');
                    console.log('='.repeat(50));
                    const preview = output.code.split('\n').slice(0, 10).join('\n');
                    console.log(preview);
                    if (output.code.split('\n').length > 10) {
                        console.log('... (–∏ –µ—â–µ ' + (output.code.split('\n').length - 10) + ' —Å—Ç—Ä–æ–∫)');
                    }
                    console.log('='.repeat(50));
                }
                else {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã–≤–æ–¥ –ò–ò. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–ø—Ç.');
                }
            }
            else {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞');
            }
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error.message);
        }
    }
}
